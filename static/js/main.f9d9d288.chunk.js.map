{"version":3,"sources":["components/Controllers/index.tsx","components/Charts/index.tsx","utils/randomNormal.ts","App.tsx","utils/createBrownianBridge.ts","utils/getColor.ts","index.tsx"],"names":["Controllers","calculateBridge","resetData","onChangeSigma","sigma","onChangeAmountPoints","amountPoints","titleForTooltip","className","direction","size","style","display","padding","Title","level","color","isMobile","onClick","type","block","controls","min","max","step","defaultValue","onChange","width","addonBefore","addonAfter","title","QuestionCircleTwoTone","Charts","data","useState","x","zoomDomain","setZoomDomain","handleZoom","domain","height","containerComponent","onZoomDomainChange","map","item","stroke","bridge","y","top","left","right","bottom","brushDimension","brushDomain","onBrushDomainChange","randomNormal","mu","r","Math","random","sqrt","log","App","initialBridge","setData","setAmountPoints","setSigma","handleChangeAmountPoints","useCallback","value","handleChangeSigma","length","dt","dt_sqrt","NdArray","numjs","empty","set","point","t","xi","h","get","tolist","reduce","arr","index","createBrownianBridge","prevState","message","notification","config","maxCount","open","description","minHeight","isDesktop","Sider","Header","marginBottom","Content","margin","Footer","textAlign","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f9d9d288.chunk.js","sourcesContent":["import { FC } from 'react';\nimport isMobile from 'react-device-detect';\n\nimport Button from 'antd/lib/button';\nimport InputNumber from 'antd/lib/input-number';\nimport Space from 'antd/lib/space';\nimport Tooltip from 'antd/lib/tooltip';\nimport Typography from 'antd/lib/typography';\nimport { QuestionCircleTwoTone } from '@ant-design/icons';\n\ninterface Props {\n  calculateBridge: () => void;\n  resetData: () => void;\n  onChangeAmountPoints: (value: number) => void;\n  onChangeSigma: (value: number) => void;\n  amountPoints: number;\n  sigma: number;\n}\n\nexport const Controllers: FC<Props> = ({ calculateBridge, resetData, onChangeSigma, sigma, onChangeAmountPoints, amountPoints, }) => {\n\n  const titleForTooltip = {\n    points: 'Number of points to generate a graph',\n    sigma: 'Standard deviation',\n  }\n\n  return (\n    <div className='controller'>\n      <Space direction=\"vertical\" size=\"middle\" style={{ display: 'flex', padding: 30 }}>\n        <Typography.Title level={4} style={{ color: !isMobile ? '#ffffff' : '#000000' }}>\n          Controllers\n        </Typography.Title>\n        <Button onClick={calculateBridge} type=\"primary\" block>\n          add new Brownian bridge\n        </Button>\n        <Button onClick={resetData} type=\"primary\" block>\n          Reset\n        </Button>\n        <InputNumber\n        controls={true}\n          min={10}\n          max={1000}\n          step=\"100\"\n          defaultValue={amountPoints}\n          onChange={onChangeAmountPoints}\n          style={{ width: '100%' }}\n          addonBefore={\"Points:\"}\n          addonAfter={\n            <Tooltip title={titleForTooltip.points}>\n              <QuestionCircleTwoTone />\n            </Tooltip>\n          }\n        />\n        <InputNumber\n          min={0.1}\n          max={10}\n          step=\"0.1\"\n          defaultValue={sigma}\n          onChange={onChangeSigma}\n          style={{ width: '100%' }}\n          addonBefore={\"Sigma:\"}\n          addonAfter={\n            <Tooltip title={titleForTooltip.sigma}>\n              <QuestionCircleTwoTone />\n            </Tooltip>\n          }\n        />\n      </Space>\n    </div>\n  );\n}","import { useState, FC } from 'react';\nimport {\n  VictoryAxis,\n  VictoryBrushContainer,\n  VictoryChart,\n  VictoryLine,\n  VictoryZoomContainer,\n  VictoryZoomContainerProps\n} from 'victory';\n\nimport { DataBringe } from '../../type';\n\ninterface Props {\n  data: DataBringe[]\n}\n\nexport const Charts: FC<Props> = ({ data }) => {\n  const [zoomDomain, setZoomDomain] = useState<VictoryZoomContainerProps['zoomDomain']>({ x: [0, 1] })\n\n  const handleZoom = (domain: VictoryZoomContainerProps['zoomDomain']) => {\n    setZoomDomain(domain);\n  };\n\n  return (\n    <>\n      <VictoryChart\n      width={900}\n      height={350}\n        containerComponent={\n          <VictoryZoomContainer\n            width={900}\n            height={350}\n            zoomDomain={zoomDomain}\n            onZoomDomainChange={handleZoom}\n          />\n        }\n      >\n        {data.map(item => (\n          <VictoryLine\n            key={item.color}\n            style={{\n              data: { stroke: item.color }\n            }}\n            data={item.bridge}\n            x={0}\n            y={1}\n        />\n        ))}\n      </VictoryChart>\n      <VictoryChart\n        padding={{ top: 10, left: 50, right: 50, bottom: 20 }}\n        height={150}\n        width={900}\n        containerComponent={\n          <VictoryBrushContainer\n          width={900}\n            height={160}\n            brushDimension=\"x\"\n            brushDomain={zoomDomain}\n            onBrushDomainChange={handleZoom}\n          />\n        }\n      >\n        <VictoryAxis />\n        {data.map(item => (\n          <VictoryLine\n            key={item.color}\n            style={{\n              data: { stroke: item.color }\n            }}\n            data={item.bridge}\n            x={0}\n            y={1}\n        />\n        ))}\n      </VictoryChart>\n    </>\n  );\n}","export const randomNormal = (mu = 0, sigma = 1): number => {\n  let x: number | null = null;\n  let r: number | null = null;\n  let y: number | null = null;\n\n  // If available, use the second previously-generated uniform random.\n  if (x != null) {\n    y = x;\n    x = null;\n  }\n  // Otherwise, generate a new x and y.\n  else do {\n    x = Math.random() * 2 - 1;\n    y = Math.random() * 2 - 1;\n    r = x * x + y * y;\n  } while (!r || r > 1);\n\n  return mu + sigma * y * Math.sqrt(-2 * Math.log(r!) / r!);\n}","import { useState, FC, useCallback } from 'react';\nimport { isDesktop, MobileView } from 'react-device-detect';\n\nimport Layout from 'antd/lib/layout';\nimport Typography from 'antd/lib/typography';\nimport notification from 'antd/lib/notification';\nimport { Controllers } from './components/Controllers';\nimport { Charts } from './components/Charts';\n\nimport { createBrownianBridge } from './utils/createBrownianBridge';\nimport { getColor } from './utils/getColor';\nimport { DataBringe } from './type';\nimport initialBridge from './initialBridge.json';\n\nimport './index.css';\n\nconst MAX_BRIDGES = 10;\n\nconst App: FC = () => {\n  const [data, setData] = useState<DataBringe[] | []>([initialBridge])\n  const [amountPoints, setAmountPoints] = useState<number>(100)\n  const [sigma, setSigma] = useState<number>(1)\n\nconst openNotification = (message: string) => {\n  notification.config({\n    maxCount: 1,\n  });\n  notification.open({\n    message: 'Warning',\n    description: message,\n  });\n};\n\n  const handleChangeAmountPoints = useCallback((value: number): void => {\n    setAmountPoints(value)\n  }, [amountPoints]);\n\n  const handleChangeSigma = useCallback((value: number): void => {\n    setSigma(value)\n  }, [sigma]);\n\n  const resetData = useCallback((): void => {\n    setData([])\n  }, []);\n\n  const calculateBridge = useCallback(() => {\n    if (data.length < MAX_BRIDGES) {\n      const bridge = createBrownianBridge(amountPoints, sigma)\n\n      setData(prevState => [...prevState, { bridge, color: getColor(prevState.length) }])\n    } else {\n      openNotification(`Max count bridges = ${MAX_BRIDGES}`)\n    }\n  }, [amountPoints, sigma, data]);\n\n  return (\n    <Layout style={{ minHeight: '100vh' }}>\n      {isDesktop &&\n        <Layout.Sider width=\"400\">\n          <div className='logo' />\n          <Controllers\n            resetData={resetData}\n            calculateBridge={calculateBridge}\n            onChangeSigma={handleChangeSigma}\n            onChangeAmountPoints={handleChangeAmountPoints}\n            amountPoints={amountPoints}\n            sigma={sigma}\n          />\n        </Layout.Sider>\n      }\n      <Layout className=\"site-layout\">\n        <Layout.Header className=\"site-layout-background\">\n          <Typography.Title level={2} style={{ marginBottom: 0 }} >\n            Brownian bridge\n          </Typography.Title>\n        </Layout.Header>\n        <Layout.Content style={{ margin: '16px' }}>\n          <div className=\"site-layout-background\" style={{ padding: 24, minHeight: 360 }}>\n            <Charts data={data} />\n          </div>\n          <MobileView>\n            <Controllers\n              resetData={resetData}\n              calculateBridge={calculateBridge}\n              onChangeSigma={handleChangeSigma}\n              onChangeAmountPoints={handleChangeAmountPoints}\n              amountPoints={amountPoints}\n              sigma={sigma}\n            />\n          </MobileView>\n        </Layout.Content>\n        <Layout.Footer style={{ textAlign: 'center' }}>©2022 Created by Modsen</Layout.Footer>\n      </Layout>\n    </Layout>\n  );\n}\n\nexport default App;","import numjs from 'numjs';\n\nimport { randomNormal } from './randomNormal';\n\n\nexport const createBrownianBridge = (amountPoints: number, sigma: number): number[][] => {\n  const dt = 1.0 / ( amountPoints - 1 )\n  const dt_sqrt = Math.sqrt(dt)\n\n  const NdArray = numjs.empty([1, amountPoints])\n\n  // Set first element to 0\n  NdArray.set(0,0,0)\n\n  for (let point = 0; point <= amountPoints - 2; point++) {\n      const t = point * dt\n      const xi = randomNormal(0, sigma) * dt_sqrt\n      const h = NdArray.get(0, point) * (1 - dt / (1 - t)) + xi\n      NdArray.set(0, point + 1, h)\n  }\n\n  // Set last element to 0\n  NdArray.set(0, amountPoints - 1, 0)\n\n  return (NdArray.tolist()[0] as unknown as number[])\n    .reduce((arr, item, index) => {\n      const y = (1 / NdArray.size) * index\n\n      return [\n        ...arr,\n        [y, item]\n      ]\n    }, [] as number[][])\n}","export const getColor = (index: number): string => {\n  const colors = [\"#F76C6A\", \"#D45BCE\", \"#AB71EB\", \"#676DD6\", \"#76C0F5\", \"#86F7C8\", \"#72D475\", \"#CBEB8B\", \"#D6CD7E\", \"#F5D690\"]\n\n  return colors[index]\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\nimport 'antd/dist/antd.css';\nimport './index.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root') as HTMLElement\n);\n"],"sourceRoot":""}