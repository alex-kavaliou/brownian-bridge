{"version":3,"sources":["utils/createChart.ts","utils/debounce.ts","components/Controllers/index.tsx","utils/randomNormal.ts","components/ChartsControllers/index.tsx","components/Charts/index.tsx","App.tsx","utils/changeDispersion.ts","utils/createBrownianBridge.ts","index.tsx"],"names":["LineChart","data","svg","xType","yType","width","height","marginTop","marginRight","marginBottom","marginLeft","xRange","yRange","X","Y","I","xScale","yScale","xAxis","yAxis","memo","listeners","initilized","xFormat","undefined","yFormat","xDomain","yDomain","color","strokeLinecap","strokeLinejoin","strokeWidth","strokeOpacity","yLabel","mouseDown","initilize","settings","d3","margin","top","right","bottom","left","subscribe","eventName","callback","Set","callbacks","add","delete","size","broadcast","args","Array","from","apply","calculateScale","console","log","ticks","tickSizeOuter","mouseMove","func","wait","h","callable","setTimeout","debounce","event","type","pageX","invert","i","property","offsetLeft","x","toFixed","y","mouseLeave","drawContainer","on","attr","append","call","g","select","remove","selectAll","clone","text","drawLine","points","d","length","line","changeScaleType","clearChart","selectChildren","clearLine","instance","this","lineChart","Component","calculateBridge","onResetData","onChangeSigma","sigma","onChangeAmountPoints","amountPoints","typeChart","handleSelectTypeChart","useState","position","setPosition","titleForTooltip","useEffect","value","className","direction","style","display","padding","Title","level","isMobile","onClick","block","controls","min","max","step","defaultValue","onChange","addonBefore","addonAfter","title","QuestionCircleTwoTone","span","Group","Button","prefix","suffix","Controllers","randomNormal","r","Math","random","sqrt","setY1","setY2","y1","y2","children","controller","useRef","draggable","setDraggable","positionX","setPositionX","startPositonX","setStartPositionX","styleController","WidthController","transform","cursor","zIndex","styleLine","backgroundColor","styleSlider","current","id","maxWidth","maxHeight","onMouseMove","e","prev","onMouseUp","ref","vertical","onMouseDown","SendOutlined","ChartsControllers","forwardRef","Header","Content","minHeight","Footer","textAlign","Charts","memoChangeDispersion","Map","cash","get","clear","dt","dt_sqrt","point","t","xi","mu","randomValue","forEach","item","index","m","result","set","changeDispersion","App","initChart","setInitChart","setData","setAmountPoints","setSigma","setTypeChart","container","handleChangeAmountPoints","useCallback","handleChangeSigma","target","handleResetData","bridge","push","createBrownianBridge","Sider","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f94de432.chunk.js","sourcesContent":["import * as d3 from \"d3\";\nimport { DataBringe, Margin, Point, ScaleType } from \"../type\";\nimport { debounce } from \"./debounce\";\n\nexport class LineChart {\n    data!: DataBringe;\n    svg!: d3.Selection<SVGSVGElement, unknown, null, undefined>;\n    xType: any;\n    yType: any;\n    width!: number;\n    height!: number;\n    marginTop!: number;\n    marginRight!: number;\n    marginBottom!: number;\n    marginLeft!: number;\n    xRange: number[] | undefined;\n    yRange: number[] | undefined;\n    X: number[] | undefined;\n    Y: number[] | undefined;\n    I: number[] | undefined;\n    xScale: any;\n    yScale: any;\n    xAxis: any;\n    yAxis: any;\n    memo: any;\n    listeners!: Record<string, Set<(...args: any[]) => any>>;\n    static instance: any;\n    initilized: boolean | undefined;\n\n    constructor() {\n        console.log('constructor')\n        if (typeof LineChart.instance === 'object') {\n            return LineChart.instance\n        }\n        this.listeners = {}\n\n        LineChart.instance = this\n        return LineChart.instance\n    }\n    xFormat = undefined;\n    yFormat = undefined;\n    xDomain = [0, 1];\n    yDomain = [-2, 2];\n    color = \"currentColor\"; // stroke color of line\n    strokeLinecap = \"round\"; // stroke line cap of the line\n    strokeLinejoin = \"round\"; // stroke line join of the line\n    strokeWidth = 1.5; // stroke width of line, in pixels\n    strokeOpacity = 1; // stroke opacity of line\n    yLabel = \"Y\"\n    mouseDown = false;\n\n    initilize = (data: DataBringe, svg: d3.Selection<SVGSVGElement, unknown, null, undefined>, settings: {\n        yType: ScaleType,\n        width: number,\n        height: number,\n        margin: Margin,\n    }) => {\n        this.data = data;\n        this.svg = svg;\n        this.width = settings.width;\n        this.height = settings.height;\n        this.xType = d3.scaleLinear;\n        this.yType = settings.yType === 'scaleLinear' ? d3.scaleLinear : d3.scaleSymlog;\n        this.marginTop = settings.margin.top; // top margin, in pixels\n        this.marginRight = settings.margin.right; // right margin, in pixels\n        this.marginBottom = settings.margin.bottom; // bottom margin, in pixels\n        this.marginLeft = settings.margin.left; // left margin, in pixels\n        this.initilized = true;\n    }\n\n    subscribe = (eventName: string, callback: (...args: any[]) => any) => {\n        if (!this.listeners[eventName]) {\n            this.listeners[eventName] = new Set()\n        }\n\n        const callbacks = this.listeners[eventName]\n        callbacks.add(callback)\n\n        return () => {\n            callbacks.delete(callback)\n\n            if (callbacks.size === 0) {\n                delete this.listeners[eventName]\n            }\n        }\n    }\n\n    private broadcast = (eventName: string, ...args: any[]) => {\n        if (!this.listeners[eventName]) {\n          return\n        }\n      \n        const callbacks = this.listeners[eventName]\n      \n        for (const callback of Array.from(callbacks)) {\n            callback.apply(null, args)\n        }\n      }\n\n    private calculateScale = () => {\n        console.log('calculateScale')\n        this.xRange = [this.marginLeft, this.width - this.marginRight];\n        this.yRange = [this.height - this.marginBottom, this.marginTop];\n        this.xScale = this.xType(this.xDomain as number[], this.xRange);\n        this.yScale = this.yType(this.yDomain as number[], this.yRange);\n        this.xAxis = d3.axisBottom(this.xScale).ticks(this.width / 50).tickSizeOuter(0);\n        this.yAxis = d3.axisLeft(this.yScale).ticks(this.height / 50, this.yFormat);\n    }\n\n    private mouseMove = debounce((event: any) => {\n        console.log(event.type, 'ff')\n        if (event.type === 'mousedown') {\n            this.mouseDown = true\n        }\n        \n        if (this.mouseDown) {\n            console.log(event.pageX, this.xScale.invert(60), this.marginLeft, 'this.marginLeft')\n            const i = d3.bisectCenter(this.X!, this.xScale.invert(event.pageX - this.svg.property('parentNode').offsetLeft));\n\n            if (this.listeners && this.X && this.Y) {\n                this.broadcast('controllerPositionMove', {x: this.X[i].toFixed(2), y: this.Y[i].toFixed(2)})\n            }\n        }\n    }, 100)\n\n    private mouseLeave = () => {\n        this.mouseDown = false\n        console.log('mouseLeave')\n    }\n\n    drawContainer = () => {\n        this.calculateScale()\n\n        d3.select('.controllerPosition')\n            .on('mousedown', this.mouseMove)\n\n        d3.select('#controllerContainer')\n            .on('mousemove', this.mouseMove)\n            .on('mouseup', this.mouseLeave)\n\n        this.svg.attr(\"width\", this.width)\n            .attr(\"height\", this.height)\n            // .attr(\"viewBox\", [0, 0, this.width, this.height])\n            // .attr(\"style\", \"max-width: 100%; height: auto; height: intrinsic; border: solid 1px;\");\n\n        this.svg.append(\"g\")\n            .attr(\"transform\", `translate(0,${this.height - this.marginBottom})`)\n            .call(this.xAxis);\n\n        this.svg.append(\"g\")\n            .attr(\"transform\", `translate(${this.marginLeft - 30},0)`)\n            .call(this.yAxis)\n            .call(g => g.select(\".domain\").remove())\n            .call(g => g.selectAll(\".tick line\").clone()\n                .attr(\"x2\", this.width - this.marginLeft)\n                .attr(\"stroke-opacity\", 0.1))\n            .call(g => g.append(\"text\")\n                .attr(\"x\", -this.marginLeft)\n                .attr(\"y\", 10)\n                .attr(\"fill\", \"currentColor\")\n                .attr(\"text-anchor\", \"start\")\n                .text(this.yLabel));\n\n    }\n\n    drawLine = (data: DataBringe) => {\n        console.log('drawLine')\n        this.data = data\n\n        this.X = d3.map(data.points, (d: Point) => d.x)\n        this.Y = d3.map(data.points, (d: Point) => d.y)\n        this.I = d3.range(this.X.length);\n\n        const line = d3.line()\n            .x((i: any) => this.xScale(this.X![i]))\n            .y((i: any) => this.yScale(this.Y![i]));\n\n        this.svg.append(\"path\")\n            .attr(\"fill\", \"none\")\n            .attr(\"stroke\", this.color)\n            .attr(\"stroke-width\", this.strokeWidth)\n            .attr(\"stroke-linecap\", this.strokeLinecap)\n            .attr(\"stroke-linejoin\", this.strokeLinejoin)\n            .attr(\"stroke-opacity\", this.strokeOpacity)\n            .attr(\"d\", line(this.I as any));\n    }\n\n    changeScaleType = (type: ScaleType) => {\n        console.log('changeScaleType')\n        this.yType = type === 'scaleLinear' ? d3.scaleLinear : d3.scaleSymlog;\n        this.drawContainer()\n        this.drawLine(this.data)\n    }\n\n    clearChart = () => {\n        console.log('clearChart')\n        this.svg.selectChildren().remove()\n    }\n\n    clearLine = () => {\n        console.log('clearLine')\n        this.svg.selectAll('path').remove()\n    }\n}","export function debounce<T extends Function>(func: T, wait = 20) {\n  let h = 0;\n  let callable = (...args: any) => {\n      if (h) return\n\n      func(...args)\n      h = setTimeout(() => h = 0, wait) as unknown as number;\n  };\n  return <T>(<any>callable);\n}","import { FC, memo, useEffect, useState } from 'react';\nimport isMobile from 'react-device-detect';\n\nimport Button from 'antd/lib/button';\nimport InputNumber from 'antd/lib/input-number';\nimport Space from 'antd/lib/space';\nimport Tooltip from 'antd/lib/tooltip';\nimport Typography from 'antd/lib/typography';\nimport Slider from 'antd/lib/slider';\nimport { QuestionCircleTwoTone } from '@ant-design/icons';\nimport Radio, { RadioChangeEvent } from 'antd/lib/radio';\nimport { Card, Col, Row, Statistic } from 'antd';\nimport { LineChart } from '../../utils/createChart';\n\ninterface Props {\n  calculateBridge: () => void;\n  onResetData: () => void;\n  onChangeAmountPoints: (value: number) => void;\n  onChangeSigma: (value: number) => void;\n  amountPoints: number;\n  sigma: number;\n  typeChart: string;\n  handleSelectTypeChart: (e: RadioChangeEvent) => void;\n}\nconst lineChart = new LineChart()\n\nconst Component: FC<Props> = ({ calculateBridge, onResetData, onChangeSigma, sigma, onChangeAmountPoints, amountPoints, typeChart, handleSelectTypeChart }) => {\n  const [position, setPosition] = useState({x: '0.00', y:'0.00'})\n  const titleForTooltip = {\n    points: 'Number of points to generate a graph',\n    sigma: 'Standard deviation',\n  }\n\n  useEffect(() => {\n    const unsubscribe = lineChart.subscribe('controllerPositionMove', (value) => setPosition(value))\n\n    return unsubscribe\n  }, [])\n\n  return (\n    <div className='controller'>\n      <Space direction=\"vertical\" size=\"middle\" style={{ display: 'flex', padding: 30 }}>\n        <Typography.Title level={4} style={{ color: !isMobile ? '#ffffff' : '#000000' }}>\n          Controllers\n        </Typography.Title>\n        <Button onClick={calculateBridge} type=\"primary\" block>\n          Calculate new Brownian bridge\n        </Button>\n        <Button onClick={onResetData} type=\"primary\" block>\n          Reset\n        </Button>\n        <InputNumber\n          controls={true}\n          min={10}\n          max={20000}\n          step=\"100\"\n          defaultValue={amountPoints}\n          onChange={onChangeAmountPoints}\n          style={{ width: '100%' }}\n          addonBefore={\"Points:\"}\n          addonAfter={\n            <Tooltip title={titleForTooltip.points}>\n              <QuestionCircleTwoTone />\n            </Tooltip>\n          }\n        />\n        <Row>\n          <Col span={11}>\n            <InputNumber\n              min={0}\n              max={5}\n              step={0.1}\n              controls={false}\n              value={sigma}\n              onChange={onChangeSigma}\n              style={{ width: '100%' }}\n              addonBefore={\"Sigma:\"}\n              addonAfter={\n                <Tooltip title={titleForTooltip.sigma}>\n                  <QuestionCircleTwoTone />\n                </Tooltip>\n              }\n            />\n          </Col>\n          <Col span={13}>\n            <Slider value={sigma} onChange={onChangeSigma} max={5} min={0} step={0.1} />\n          </Col>\n        </Row>\n        <Radio.Group value={typeChart} onChange={handleSelectTypeChart}>\n          <Radio.Button value=\"scaleLinear\">scaleLinear</Radio.Button>\n          <Radio.Button value=\"scaleLog\">scaleLog</Radio.Button>\n        </Radio.Group>\n        <Card>\n          <Statistic title=\"Position\" value={position.x} prefix={'x:'} suffix={`/ y:${position.y}`} />\n        </Card>\n      </Space>\n    </div>\n  );\n}\n\nexport const Controllers = memo(Component)\n","/**  Formula Normal = mu + sigma * randomValue */\nexport const randomNormal = (): number => {\n  let x: number | null = null;\n  let r: number | null = null;\n  let y: number | null = null;\n\n  // If available, use the second previously-generated uniform random.\n  if (x != null) {\n    y = x;\n    x = null;\n  }\n  // Otherwise, generate a new x and y.\n  else do {\n    x = Math.random() * 2 - 1;\n    y = Math.random() * 2 - 1;\n    r = x * x + y * y;\n  } while (!r || r > 1);\n\n  return y * Math.sqrt(-2 * Math.log(r!) / r!)\n}\n","import { SendOutlined } from '@ant-design/icons';\nimport { Slider } from 'antd';\nimport { memo, ReactElement, useEffect, useRef, useState } from 'react';\nimport { Margin } from '../../type';\n\ninterface Props {\n  setY1: (value: number) => void;\n  setY2: (value: number) => void;\n  height: number;\n  width: number;\n  margin: Margin;\n  y1: number;\n  y2: number;\n  children: ReactElement;\n}\n\nconst WidthController = 22;\n\nconst Component: React.FC<Props> = ({ setY1, setY2, height, width, y1, y2, margin, children }) => {\n  const controller = useRef<HTMLDivElement | null>(null)\n  const [draggable, setDraggable] = useState(false)\n  const [positionX, setPositionX] = useState(margin.left)\n  const [startPositonX, setStartPositionX] = useState(0)\n\n  const styleController: React.CSSProperties = {\n    position: \"absolute\",\n    bottom: margin.bottom - WidthController / 2,\n    transform: 'translateX(-50%)',\n    left: positionX,\n    cursor: draggable ? 'grabbing' : 'grab',\n    zIndex: 9,\n  };\n\n  const styleControllerContainer: React.CSSProperties = {\n    position: 'relative',\n    maxWidth: \"fit-content\",\n    maxHeight: 500,\n  };\n\n  const styleIcon: React.CSSProperties = {\n    transform: 'rotate(270deg)',\n    padding: 4,\n  };\n\n  const styleLine: React.CSSProperties = {\n    position: \"absolute\",\n    bottom: 16,\n    left: 10,\n    width: 1,\n    height: height - margin.top - margin.bottom - 16,\n    backgroundColor: \"grey\"\n  }\n\n  const styleSlider: React.CSSProperties = {\n    position: \"absolute\",\n    height: height - margin.top - margin.bottom,\n    top: margin.top - 4,\n  };\n\n  const handleMouseDown = () => {\n    setDraggable(true)\n  }\n\n  const handleMouseUp = () => {\n    setDraggable(false)\n  }\n\n  const handleMouseMove = (e: React.MouseEvent<HTMLDivElement>): void => {\n    if (draggable && controller.current) {\n      const x = e.pageX - startPositonX + margin.left\n      setPositionX(prev => (x >= margin.left && x <= width - margin.right) ? x : prev)\n    }\n  }\n\n  useEffect(() => {\n    if (controller.current) {\n      console.log(controller.current.offsetLeft, 'controller.current.offsetLeft')\n      setStartPositionX(controller.current.offsetLeft + margin.left)\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [controller.current, margin.left])\n\n  return (\n    <div id='controllerContainer' style={styleControllerContainer} onMouseMove={handleMouseMove} onMouseUp={handleMouseUp} ref={controller}>\n      <div style={{ ...styleSlider, left: margin.left - 16 }}>\n        <Slider className='chart-slider' vertical defaultValue={y1} onChange={setY1} max={2} min={-2} step={0.01} />\n      </div>\n        <div className='controllerPosition' style={styleController} onMouseDown={handleMouseDown}>\n          <span style={styleLine} />\n          <SendOutlined style={styleIcon} />\n        </div>\n      <div style={{ ...styleSlider, left: margin.left + 900 - 16 }}>\n        <Slider className='chart-slider' vertical defaultValue={y2} onChange={setY2} max={2} min={-2} step={0.01} />\n      </div>\n      {children}\n    </div>\n  );\n}\n\nexport const ChartsControllers = memo(Component);\n","import { Layout, Slider, Typography } from 'antd';\nimport { forwardRef, memo } from 'react';\nimport { DataBringe, Margin } from '../../type';\nimport { ChartsControllers } from '../ChartsControllers';\n\ninterface Props {\n  setY1: (value: number) => void;\n  setY2: (value: number) => void;\n  height: number;\n  width: number;\n  margin: Margin;\n  y1: number;\n  y2: number;\n  data: DataBringe | null;\n}\n\n\nconst Component = forwardRef<SVGSVGElement, Props>(({ setY1, setY2, height, width, y1, y2, margin }, ref) => {\n\n  return (\n    <Layout className=\"site-layout\">\n      <Layout.Header className=\"site-layout-background\">\n        <Typography.Title level={2} style={{ marginBottom: 0 }} >\n          Brownian bridge\n        </Typography.Title>\n      </Layout.Header>\n      <Layout.Content style={{ margin: '16px' }}>\n        <div className=\"site-layout-background\" style={{ padding: 24, minHeight: 360 }}>\n            <ChartsControllers setY1={setY1} setY2={setY2} height={height} width={width} y1={y1} y2={y2} margin={margin}>\n            <svg ref={ref} />\n            </ChartsControllers>\n        </div>\n      </Layout.Content>\n      <Layout.Footer style={{ textAlign: 'center' }}>©2022 Created by Modsen</Layout.Footer>\n    </Layout>\n  );\n})\n\nexport const Charts = memo(Component);\n","import { useState, FC, useCallback, useEffect, useRef } from 'react';\n\nimport Layout from 'antd/lib/layout';\nimport { Controllers } from './components/Controllers';\n\nimport { createBrownianBridge } from './utils/createBrownianBridge';\nimport { DataBringe, Margin, ScaleType } from './type';\n\nimport './index.css';\nimport { LineChart } from './utils/createChart';\nimport { changeDispersion } from './utils/changeDispersion';\nimport { RadioChangeEvent } from 'antd';\nimport { Charts } from './components/Charts';\nimport * as d3 from \"d3\";\n\nconst memoChangeDispersion = changeDispersion()\nconst lineChart = new LineChart()\n\nconst App: FC = () => {\n  const [initChart, setInitChart] = useState(false)\n  const [data, setData] = useState<DataBringe | null>(null)\n  const [amountPoints, setAmountPoints] = useState<number>(100)\n  const [sigma, setSigma] = useState<number>(1)\n  const [y1, setY1] = useState<number>(0)\n  const [y2, setY2] = useState<number>(0)\n  const [height] = useState<number>(500)\n  const [width] = useState<number>(600)\n  const [margin] = useState<Margin>({\n    top: 20,\n    bottom: 30,\n    left: 60,\n    right: 40,\n  })\n  const [typeChart, setTypeChart] = useState<ScaleType>(\"scaleLinear\")\n  const container = useRef<SVGSVGElement | null>(null)\n\n  const handleChangeAmountPoints = useCallback((value: number): void => {\n    setAmountPoints(value)\n  }, []);\n\n  const handleChangeSigma = useCallback((value: number): void => {\n    setSigma(value)\n  }, []);\n\n  const handleSelectTypeChart = useCallback((e: RadioChangeEvent) => {\n    setTypeChart(e.target.value)\n  }, [setTypeChart])\n\n  const handleResetData = useCallback((): void => {\n    if (initChart) {\n      lineChart.clearLine()\n    }\n    setData(null)\n  }, []);\n\n  const calculateBridge = useCallback(() => {\n    const bridge = createBrownianBridge(amountPoints, sigma, y1, y2)\n    setData(bridge)\n  }, [amountPoints, sigma, y1, y2]);\n\n  useEffect(() => {\n    calculateBridge()\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [y1, y2])\n\n  useEffect(() => {\n    if (data) {\n      const bridge = memoChangeDispersion(sigma, data);\n      setData(bridge)\n    }\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [sigma])\n\n  useEffect(() => {\n    if (initChart && data) {\n      lineChart.clearLine()\n      lineChart.drawLine(data)\n    }\n  }, [initChart, data])\n\n  useEffect(() => {\n    const svg = d3.select(container.current)\n    if (container.current && data) {\n      console.log('start')\n      lineChart.initilize(data, svg as any, { yType: typeChart, width: 1000, height: 500, margin })\n      lineChart.drawContainer()\n      setInitChart(lineChart.initilized!)\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [container.current])\n\n  useEffect(() => {\n    if (initChart) {\n      lineChart.clearChart()\n      lineChart.changeScaleType(typeChart)\n    }\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [initChart, typeChart])\n\n  return (\n    <Layout style={{ minHeight: '100vh' }}>\n      <Layout.Sider width=\"400\">\n        <div className='logo' />\n        <Controllers\n          onResetData={handleResetData}\n          calculateBridge={calculateBridge}\n          onChangeSigma={handleChangeSigma}\n          onChangeAmountPoints={handleChangeAmountPoints}\n          handleSelectTypeChart={handleSelectTypeChart}\n          amountPoints={amountPoints}\n          sigma={sigma}\n          typeChart={typeChart}\n        />\n      </Layout.Sider>\n      <Charts\n        setY1={setY1}\n        setY2={setY2}\n        height={height}\n        width={width}\n        margin={margin}\n        y1={y1}\n        y2={y2}\n        data={data}\n        ref={container}\n      />\n    </Layout>\n  );\n}\n\nexport default App;","import { DataBringe, Point } from '../type';\n\nexport const changeDispersion = (): (sigma: number, data: DataBringe) => DataBringe => {\n  const memo = new Map()\n\n  return (sigma, data) => {\n    const cash = memo.get(sigma) as DataBringe | undefined\n    if (cash) {\n      if (cash.id !== data.id) {\n        memo.clear()\n      } else {\n        return cash\n      }\n    }\n\n    const amountPoints = data.points.length - 1\n    const dt = 1.0 / (amountPoints)\n    const dt_sqrt = Math.sqrt(dt)\n  \n    const points: Point[] = [data.points[0]]\n  \n    for (let point = 0; point < amountPoints - 1; point++) {\n      const t = point * dt\n  \n      const xi = (data.mu + sigma * data.points[point + 1].randomValue) * dt_sqrt\n      const h = points[point].y * (1 - dt / (1 - t)) + xi\n  \n      points[point + 1] = {\n        x: (1 / amountPoints) * (point + 1),\n        y: h,\n        randomValue: data.points[point + 1].randomValue,\n      }\n    }\n  \n    // Set last element to 0\n    points[amountPoints] = data.points[amountPoints]\n  \n    points.forEach((item, index) => {\n      points[index] = {\n        ...item,\n        y: (index === points.length - 1) ? item.y : (item.y + data.m[index])\n      }\n    })\n\n    const result = {\n      ...data,\n      points,\n    }\n\n    memo.set(sigma, result)\n    return result\n  }\n}","import { randomNormal } from './randomNormal';\nimport { DataBringe, Point } from '../type';\n\nexport const createBrownianBridge = (amountPoints: number, sigma: number, y1 = 0, y2 = 0, mu = 0,): DataBringe => {\n  const m: number[] = [0];\n  const dt = 1.0 / (amountPoints)\n  // Set first element\n  const points: Point[] = [{ x: 0, y: y1, randomValue: 0 }]\n\n  for (let index = 0; index < amountPoints - 1; index++) {\n    const t = index * dt\n    m.push(y2 * t)\n    const randomValue = randomNormal()\n\n    const xi = (mu + sigma * randomValue) * Math.sqrt(dt)\n    const h = points[index].y * (1 - dt / (1 - t)) + xi\n\n    points[index + 1] = {\n      x: (1 / amountPoints) * (index + 1),\n      y: h,\n      randomValue,\n    }\n  }\n\n  // Set last element\n  points[amountPoints] = {\n    x: 1,\n    y: y2,\n    randomValue: 0,\n  }\n\n  points.forEach((item, index) => {\n    points[index] = {\n      ...item,\n      y: (index === points.length - 1) ? item.y : (item.y + m[index])\n    }\n  })\n\n  return {\n    id: Math.random(),\n    m,\n    points,\n    mu: 0,\n    sigma: sigma,\n  }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\nimport 'antd/dist/antd.css';\nimport './index.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root') as HTMLElement\n);\n"],"sourceRoot":""}